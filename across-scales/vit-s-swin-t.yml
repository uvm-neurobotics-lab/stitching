#
# Stitch Swin-Tiny and ViT-Small. There are no stages in ViT so stage boundaries are arbitrary there.
#
# Available models:
#  - vit_small_patch16_224.augreg_in1k:                 78.8% (Supervised method from "How to train your ViT")
#  - vit_small_patch16_224.augreg_in21k_ft_in1k (alt):  81.4% (Self-supervised + fine-tuning from "How to train your ViT")
#  - swin_t:                                            81.5% (Swin-Tiny)
#  - swin_v2_t (alternative):                           82.1% (SwinV2-Tiny)
#

src_stages:
  - Subnet:
      backend: timm
      model_name: vit_small_patch16_224.augreg_in1k
      block_input: x
      block_output: blocks.0
      in_format: img
      out_format: [bert, [384, 196]]
  - Subnet:
      backend: timm
      model_name: vit_small_patch16_224.augreg_in1k
      block_input: blocks.1
      block_output: blocks.2
      in_format: [bert, [384, 196]]
      out_format: [bert, [384, 196]]
  - Subnet:  # Downsample block placeholder (not an actual downsample)
      backend: timm
      model_name: vit_small_patch16_224.augreg_in1k
      block_input: blocks.3
      block_output: blocks.3
      in_format: [bert, [384, 196]]
      out_format: [bert, [384, 196]]
  - Subnet:
      backend: timm
      model_name: vit_small_patch16_224.augreg_in1k
      block_input: blocks.4
      block_output: blocks.5
      in_format: [bert, [384, 196]]
      out_format: [bert, [384, 196]]
  - Subnet:  # Downsample block placeholder (not an actual downsample)
      backend: timm
      model_name: vit_small_patch16_224.augreg_in1k
      block_input: blocks.6
      block_output: blocks.6
      in_format: [bert, [384, 196]]
      out_format: [bert, [384, 196]]
  - Subnet:
      backend: timm
      model_name: vit_small_patch16_224.augreg_in1k
      block_input: blocks.7
      block_output: blocks.8
      in_format: [bert, [384, 196]]
      out_format: [bert, [384, 196]]
  - Subnet:  # Downsample block placeholder (not an actual downsample)
      backend: timm
      model_name: vit_small_patch16_224.augreg_in1k
      block_input: blocks.9
      block_output: blocks.9
      in_format: [bert, [384, 196]]
      out_format: [bert, [384, 196]]
  - Subnet:
      backend: timm
      model_name: vit_small_patch16_224.augreg_in1k
      block_input: blocks.10
      block_output: head
      in_format: [bert, [384, 196]]
      out_format: vector

dest_stages:
  - Subnet:
      backend: pytorch
      model_name: swin_t
      block_input: x
      block_output: features.0
      in_format: img
      out_format: [bhwc, [96, 56, 56]]
  - Subnet:
      backend: pytorch
      model_name: swin_t
      block_input: features.1
      block_output: features.1
      in_format: [bhwc, [96, 56, 56]]
      out_format: [bhwc, [96, 56, 56]]
  - Subnet:  # Downsample block
      backend: pytorch
      model_name: swin_t
      block_input: features.2
      block_output: features.2
      in_format: [bhwc, [96, 56, 56]]
      out_format: [bhwc, [192, 28, 28]]
  - Subnet:
      backend: pytorch
      model_name: swin_t
      block_input: features.3
      block_output: features.3
      in_format: [bhwc, [192, 28, 28]]
      out_format: [bhwc, [192, 28, 28]]
  - Subnet:  # Downsample block
      backend: pytorch
      model_name: swin_t
      block_input: features.4
      block_output: features.4
      in_format: [bhwc, [192, 28, 28]]
      out_format: [bhwc, [384, 14, 14]]
  - Subnet:
      backend: pytorch
      model_name: swin_t
      block_input: features.5
      block_output: features.5
      in_format: [bhwc, [384, 14, 14]]
      out_format: [bhwc, [384, 14, 14]]
  - Subnet:  # Downsample block
      backend: pytorch
      model_name: swin_t
      block_input: features.6
      block_output: features.6
      in_format: [bhwc, [384, 14, 14]]
      out_format: [bhwc, [768, 7, 7]]
  - Subnet:
      backend: pytorch
      model_name: swin_t
      block_input: features.7
      block_output: head
      in_format: [bhwc, [768, 7, 7]]
      out_format: vector

gaps: !include 4-stage-gaps.yml
stitchers: !include default-stitchers.yml


train_config:
  # Dataset
  dataset: imagenet
  data_augmentation: true

  # General Params
  seed: 12345
  epochs: &epochs 10

  # Optimization
  # In Appendix A.4 of "Revisiting Model Stitching" they say, "All stitching layers were optimized with Adam cosine
  # learning rate schedule and initial learning rate 0.001".
  batch_size: 256
  optimizer: AdamW
  optimizer_args:
    lr: 2.0e-3
    weight_decay: 0.05
  lr_scheduler: CosineAnnealingLR
  lr_scheduler_args:
    T_max: *epochs
    eta_min: 0.0
